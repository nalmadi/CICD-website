- create repo
- clone repo
- navigate to new repo
- create new venv
- myvenv\Scripts\activate
- pip install flask pytest
- pip freeze > requirements.txt
- mkdir src
- cd src
- make file app.py
- write:

#############
from flask import Flask

app = Flask(__name__)


@app.route("/")
def index():
	return "hello, World!"


if __name__ == "__main__":
	app.run() 
##############


- python app.py
- visit http://127.0.0.1:5000/
- ctrl + C
- cd ..
- mkdir tests
- cd tests
- make file test_app.py
- write:
#############
from app import index


def test_index():
	assert index() == "hello, world!"
#############


- add a file .gitignore
- write in it:
##############
myvenv/
__pycache__/
##############


- git add all files 
- git commit -m "initial commit"
- go to actions
- select Python application
- review action
- check auto build details
- make test fail and push to repo and see build in actions
- review DevOps loop and think about deployment
- go to Heroku (a platform as a service)
- install Heroku CLI
- Heroku login
- heroku create # to create a new application
- we want to automate deployment to Heroku servers
- go to https://devcenter.heroku.com/articles/platform-api-quickstart
- heroku authorizations:create
- how to use token without making it public?
- go to github settings secrets
- click on add new secret
- add HEROKU_API_TOKEN and HEROKU_APP_NAME (salty-river-43291) to secrets
- go to yaml workflow action
- add:


    - name: Deploy to Heroku
      env:
        HEROKU_API_TOKEN: ${{ secrets.HEROKU_API_TOKEN }}
        HEROKI_APP_NAME: ${{ secrets.HEROKI_APP_NAME }}
      if: github.ref == 'refs/head/main' && job.status == 'success'
      run: |
        git remote add Heroku https://Heroku:$HEROKU_API_TOKEN@git.heroku.com/$HEROKU_APP_NAME.git
        git push heroku HEAD:main -f


- create Procfile
- add:
  web gunicorn --pythonpath . app:app

- create runtime.txt
python-3.7.6